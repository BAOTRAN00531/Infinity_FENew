// pages/InvoicePage.tsx
import React, { useEffect, useState } from 'react';
import { Link, useNavigate, useSearchParams } from 'react-router-dom';
import { motion } from 'framer-motion';
import { toast } from 'react-toastify';
import PageLayout from '@/pages/Management/PageLayout';
import api from '@/api/api';
import { ShoppingCart } from "lucide-react"; // ‚úÖ thay v√¨ axios

interface OrderDetailDTO {
    serviceName: string;
    serviceDesc: string;
    price: number;
}
interface Invoice {
    courseName: string;
    orderCode: string;
    status: string;
    totalAmount: number;
    paymentMethod: string;
    orderDate: string;
    details: OrderDetailDTO[];
}

const statusBadge: Record<string, string> = {
    PENDING: 'bg-yellow-100 text-yellow-800',
    PROCESSING: 'bg-blue-100 text-blue-800',
    COMPLETED: 'bg-green-100 text-green-800',
    CANCELED: 'bg-red-100 text-red-800',
};

const InvoicePage: React.FC = () => {
    const [searchParams] = useSearchParams();
    const [invoice, setInvoice] = useState<Invoice | null>(null);
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();

    const orderCode = searchParams.get('orderId');
    const result = searchParams.get('result');

    useEffect(() => {
        const fetchData = async () => {
            if (!orderCode) return;

            try {
                const { data } = await api.get<Invoice>(`/api/orders/code/${orderCode}`);
                setInvoice(data);
            } catch (err) {
                toast.error('Kh√¥ng th·ªÉ t·∫£i ho√° ƒë∆°n', { autoClose: 1200 });
            } finally {
                setLoading(false);
            }
        };
        fetchData();
    }, [orderCode]);

    const handleCancel = async () => {
        if (!invoice) return;
        if (!window.confirm('B·∫°n ch·∫Øc ch·∫Øn mu·ªën hu·ª∑ ƒë∆°n h√†ng n√†y?')) return;

        try {
            await api.post(`/api/orders/cancel?orderCode=${invoice.orderCode}`, {});
            toast.success('Hu·ª∑ ƒë∆°n th√†nh c√¥ng!', { autoClose: 1200 });
            setTimeout(() => navigate('/order-history'), 1500);
        } catch (err) {
            toast.error('Kh√¥ng th·ªÉ hu·ª∑ ƒë∆°n. Vui l√≤ng th·ª≠ l·∫°i.', { autoClose: 1200 });
        }
    };

    if (loading) return <div className="p-10 text-gray-600">ƒêang t·∫£i...</div>;
    if (!invoice) return <div className="p-10 text-red-500">Kh√¥ng t√¨m th·∫•y ho√° ƒë∆°n.</div>;

    return (
        <PageLayout>
            <div className="max-w-2xl mx-auto px-4 py-10">
                {/* Ti√™u ƒë·ªÅ */}
                <motion.h2
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.4 }}
                    className={`text-2xl font-bold mb-6 ${
                        result === 'success' ? 'text-green-600' : 'text-red-600'
                    }`}
                >
                    {result === 'success' && 'üéâ Thanh to√°n th√†nh c√¥ng!'}
                    {result === 'fail' && '‚ùå ƒê∆°n h√†ng ƒë√£ hu·ª∑'}
                    {result === 'pending' && '‚è≥ ƒê∆°n h√†ng ƒëang ch·ªù x·ª≠ l√Ω'}
                </motion.h2>

                {/* Card ho√° ƒë∆°n */}
                <div className="bg-white dark:bg-gray-800 shadow-xl rounded-2xl p-6 border border-gray-200 dark:border-gray-700 space-y-4">
                    <div className="flex flex-wrap gap-2">
                        <span className="font-semibold">M√£ ƒë∆°n:</span>
                        <span className="font-mono">{invoice.orderCode}</span>
                    </div>

                    <div className="flex flex-wrap gap-2">
                        <span className="font-semibold">Kh√≥a h·ªçc:</span>
                        <span className="font-mono">{invoice.courseName}</span>
                    </div>

                    <div className="flex flex-wrap gap-2">
                        <span className="font-semibold">Ng√†y t·∫°o:</span>
                        <span>
                            {new Date(invoice.orderDate).toLocaleString('vi-VN')}
                        </span>
                    </div>

                    <div className="flex flex-wrap gap-2">
                        <span className="font-semibold">Ph∆∞∆°ng th·ª©c:</span>
                        <span>{invoice.paymentMethod}</span>
                    </div>

                    <div className="flex flex-wrap gap-2 items-center">
                        <span className="font-semibold">Tr·∫°ng th√°i:</span>
                        <span
                            className={`px-2 py-0.5 rounded text-xs font-semibold ${
                                statusBadge[invoice.status] ?? 'bg-gray-100 text-gray-800'
                            }`}
                        >
                            {invoice.status}
                        </span>
                    </div>

                    <div className="flex flex-wrap gap-2">
                        <span className="font-semibold">T·ªïng ti·ªÅn:</span>
                        <span className="text-green-600 font-bold">
                            {invoice.totalAmount.toLocaleString()}‚Ç´
                        </span>
                    </div>

                    {/* Chi ti·∫øt d·ªãch v·ª• */}
                    {invoice.details?.length > 0 && (
                        <div className="mt-4">
                            <h4 className="font-semibold mb-3 text-lg">üìã Chi ti·∫øt ƒë∆°n h√†ng</h4>

                            <div className="overflow-hidden rounded-xl border border-gray-200 dark:border-gray-700 shadow-sm">
                                <table className="w-full text-sm">
                                    <thead className="bg-gray-100 dark:bg-gray-700">
                                    <tr>
                                        <th className="px-4 py-2 text-left font-medium">D·ªãch v·ª•</th>
                                        <th className="px-4 py-2 text-left font-medium">M√¥ t·∫£</th>
                                        <th className="px-4 py-2 text-right font-medium">Gi√°</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    {invoice.details.map((d, idx) => (
                                        <tr
                                            key={idx}
                                            className="border-t border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800 transition"
                                        >
                                            <td className="px-4 py-2 font-medium">{d.serviceName}</td>
                                            <td className="px-4 py-2 text-gray-600 dark:text-gray-300">
                                                {d.serviceDesc}
                                            </td>
                                            <td className="px-4 py-2 text-right text-green-600 font-semibold">
                                                {d.price.toLocaleString()}‚Ç´
                                            </td>
                                        </tr>
                                    ))}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    )}

                    {/* N√∫t hu·ª∑ ƒë∆°n */}
                    {invoice.status === 'PENDING' && (
                        <button
                            onClick={handleCancel}
                            className="mt-4 w-full sm:w-auto px-5 py-2 rounded bg-red-600 text-white hover:bg-red-700 transition"
                        >
                            Hu·ª∑ ƒë∆°n h√†ng
                        </button>
                    )}
                </div>
            </div>

            {/* N√∫t ti·∫øp t·ª•c mua h√†ng */}
            <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.2 }}
                className="mt-6 mb-10 flex justify-center"
            >
                <Link
                    to="/client/course"
                    className="inline-flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-2xl shadow-md transition duration-300"
                >
                    <ShoppingCart className="w-5 h-5" />
                    Ti·∫øp t·ª•c mua h√†ng
                </Link>
            </motion.div>
        </PageLayout>
    );
};

export default InvoicePage;
